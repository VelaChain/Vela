// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: market/fee_map.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FeeMap struct {
	PoolName string `protobuf:"bytes,1,opt,name=poolName,proto3" json:"poolName,omitempty"`
	Swap     string `protobuf:"bytes,2,opt,name=swap,proto3" json:"swap,omitempty"`
	Exit     string `protobuf:"bytes,3,opt,name=exit,proto3" json:"exit,omitempty"`
}

func (m *FeeMap) Reset()         { *m = FeeMap{} }
func (m *FeeMap) String() string { return proto.CompactTextString(m) }
func (*FeeMap) ProtoMessage()    {}
func (*FeeMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_d447ac7402ebfd06, []int{0}
}
func (m *FeeMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FeeMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FeeMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeMap.Merge(m, src)
}
func (m *FeeMap) XXX_Size() int {
	return m.Size()
}
func (m *FeeMap) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeMap.DiscardUnknown(m)
}

var xxx_messageInfo_FeeMap proto.InternalMessageInfo

func (m *FeeMap) GetPoolName() string {
	if m != nil {
		return m.PoolName
	}
	return ""
}

func (m *FeeMap) GetSwap() string {
	if m != nil {
		return m.Swap
	}
	return ""
}

func (m *FeeMap) GetExit() string {
	if m != nil {
		return m.Exit
	}
	return ""
}

func init() {
	proto.RegisterType((*FeeMap)(nil), "VelaChain.vela.market.FeeMap")
}

func init() { proto.RegisterFile("market/fee_map.proto", fileDescriptor_d447ac7402ebfd06) }

var fileDescriptor_d447ac7402ebfd06 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xc9, 0x4d, 0x2c, 0xca,
	0x4e, 0x2d, 0xd1, 0x4f, 0x4b, 0x4d, 0x8d, 0xcf, 0x4d, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x12, 0x0d, 0x4b, 0xcd, 0x49, 0x74, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x2b, 0x4b, 0xcd, 0x49,
	0xd4, 0x83, 0x28, 0x52, 0xf2, 0xe1, 0x62, 0x73, 0x4b, 0x4d, 0xf5, 0x4d, 0x2c, 0x10, 0x92, 0xe2,
	0xe2, 0x28, 0xc8, 0xcf, 0xcf, 0xf1, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c,
	0x82, 0xf3, 0x85, 0x84, 0xb8, 0x58, 0x8a, 0xcb, 0x13, 0x0b, 0x24, 0x98, 0xc0, 0xe2, 0x60, 0x36,
	0x48, 0x2c, 0xb5, 0x22, 0xb3, 0x44, 0x82, 0x19, 0x22, 0x06, 0x62, 0x3b, 0x39, 0x9d, 0x78, 0x24,
	0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78,
	0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x46, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e,
	0x72, 0x7e, 0xae, 0x3e, 0xdc, 0x25, 0xfa, 0x20, 0x97, 0xe8, 0x57, 0xe8, 0x43, 0x1d, 0x5c, 0x52,
	0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x76, 0xaf, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xe8, 0x47,
	0xe9, 0x61, 0xc7, 0x00, 0x00, 0x00,
}

func (m *FeeMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Exit) > 0 {
		i -= len(m.Exit)
		copy(dAtA[i:], m.Exit)
		i = encodeVarintFeeMap(dAtA, i, uint64(len(m.Exit)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Swap) > 0 {
		i -= len(m.Swap)
		copy(dAtA[i:], m.Swap)
		i = encodeVarintFeeMap(dAtA, i, uint64(len(m.Swap)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PoolName) > 0 {
		i -= len(m.PoolName)
		copy(dAtA[i:], m.PoolName)
		i = encodeVarintFeeMap(dAtA, i, uint64(len(m.PoolName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFeeMap(dAtA []byte, offset int, v uint64) int {
	offset -= sovFeeMap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FeeMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolName)
	if l > 0 {
		n += 1 + l + sovFeeMap(uint64(l))
	}
	l = len(m.Swap)
	if l > 0 {
		n += 1 + l + sovFeeMap(uint64(l))
	}
	l = len(m.Exit)
	if l > 0 {
		n += 1 + l + sovFeeMap(uint64(l))
	}
	return n
}

func sovFeeMap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFeeMap(x uint64) (n int) {
	return sovFeeMap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FeeMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFeeMap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Swap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Swap = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFeeMap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFeeMap
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFeeMap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFeeMap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFeeMap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFeeMap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFeeMap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFeeMap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFeeMap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFeeMap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFeeMap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFeeMap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFeeMap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFeeMap = fmt.Errorf("proto: unexpected end of group")
)
